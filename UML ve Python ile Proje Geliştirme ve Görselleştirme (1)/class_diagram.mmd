classDiagram
    class INode {
        <<interface>>
        +string label
        +string name
        +number version
        +string type
        +string icon
        +string category
        +string description
        +string[] baseClasses
        +INodeParams credential
        +INodeParams[] inputs
        +INodeOutputsValue[] outputs
        +init(nodeData, input, options) Promise~any~
    }
    
    class INodeParams {
        +string label
        +string name
        +string type
        +boolean required
        +any default
        +object[] options
        +boolean list
        +boolean optional
    }
    
    class INodeOutputsValue {
        +string label
        +string name
        +string[] baseClasses
    }
    
    class ChatOpenAI {
        +string label
        +string name
        +string type
        +string category
        +string[] baseClasses
        +INodeParams[] inputs
        +INodeOutputsValue[] outputs
        +init(nodeData) Promise~ChatOpenAI~
    }
    
    class LLMChain {
        +string label
        +string name
        +string type
        +string category
        +string[] baseClasses
        +INodeParams[] inputs
        +INodeOutputsValue[] outputs
        +init(nodeData) Promise~LLMChain~
    }
    
    class PromptTemplate {
        +string label
        +string name
        +string type
        +string category
        +string[] baseClasses
        +INodeParams[] inputs
        +INodeOutputsValue[] outputs
        +init(nodeData) Promise~PromptTemplate~
    }
    
    class BufferMemory {
        +string label
        +string name
        +string type
        +string category
        +string[] baseClasses
        +INodeParams[] inputs
        +INodeOutputsValue[] outputs
        +init(nodeData) Promise~BufferMemory~
    }
    
    class NodesPool {
        -Map~string,IComponentNodes~ componentNodes
        +initialize() Promise~void~
        +getNodeInstance(nodeName) INode
        +getAllNodes() INode[]
        +getNodesByCategory(category) INode[]
    }
    
    class WorkflowEngine {
        -INode[] reactFlowNodes
        -IEdge[] reactFlowEdges
        -DirectedGraph graph
        -NodesPool nodesPool
        +buildFlow(chatflowId) Promise~any~
        +executeFlow(flowData, input) Promise~any~
        -constructGraphFromEndNode(nodeId) Promise~any~
        -getInputNodes(nodeId) INode[]
        -topologicalSort(nodes, edges) string[]
    }
    
    class ChatFlowExecutor {
        -Map~string,any~ nodeInstances
        +executeFlow(flowData, input) Promise~any~
        -prepareNodeInputs(nodeId, edges) any
        -getNodeClass(type) INode
    }
    
    class ChatSessionManager {
        -Map~string,ChatSession~ sessions
        +getSession(sessionId) ChatSession
        +processMessage(sessionId, message, chatflowId) Promise~any~
        +clearSession(sessionId) void
    }
    
    class ChatSession {
        +string id
        +BaseMemory memory
        +object state
        +ChatMessage[] history
        +Date createdAt
        +Date updatedAt
    }
    
    INode <|.. ChatOpenAI
    INode <|.. LLMChain
    INode <|.. PromptTemplate
    INode <|.. BufferMemory
    
    INode --> INodeParams : uses
    INode --> INodeOutputsValue : uses
    
    NodesPool --> INode : manages
    WorkflowEngine --> NodesPool : uses
    WorkflowEngine --> ChatFlowExecutor : uses
    ChatFlowExecutor --> INode : executes
    
    ChatSessionManager --> ChatSession : manages
    ChatSession --> BufferMemory : contains

