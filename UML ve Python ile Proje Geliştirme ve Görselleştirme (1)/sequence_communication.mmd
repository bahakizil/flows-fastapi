sequenceDiagram
    participant WE as Workflow Engine
    participant NodeA as Source Node
    participant NodeB as Target Node
    participant TC as Type Checker
    participant Cache as Node Cache
    
    Note over WE: Flow execution başlıyor
    
    WE->>+NodeA: init(nodeData, input)
    NodeA->>NodeA: processInput()
    NodeA->>NodeA: validateInputs()
    NodeA-->>-WE: outputResult
    Note over WE,NodeA: Output: { type: "BaseLanguageModel", value: chatOpenAI }
    
    WE->>WE: findTargetNodes(NodeA.id)
    Note over WE: Target: NodeB (LLM Chain)
    
    WE->>+TC: validateConnection(NodeA.output, NodeB.input)
    TC->>TC: checkBaseClasses(["BaseLanguageModel"], "BaseLanguageModel")
    TC-->>-WE: connectionValid: true
    
    WE->>+Cache: storeNodeResult(NodeA.id, outputResult)
    Cache-->>-WE: stored
    
    WE->>WE: prepareNodeInputs(NodeB.id)
    WE->>+Cache: getNodeResult(NodeA.id)
    Cache-->>-WE: NodeA.output
    
    WE->>+NodeB: init(nodeData, input)
    Note over NodeB: nodeData.inputs = { llm: NodeA.output, prompt: promptTemplate }
    
    NodeB->>NodeB: validateRequiredInputs()
    alt All inputs available
        NodeB->>NodeB: createLLMChain(llm, prompt)
        NodeB->>NodeB: executeChain(input)
        NodeB-->>WE: chainResult
    else Missing inputs
        NodeB-->>WE: Error: Missing required input
    end
    
    WE->>+Cache: storeNodeResult(NodeB.id, chainResult)
    Cache-->>-WE: stored
    
    Note over WE: Flow execution tamamlandı

