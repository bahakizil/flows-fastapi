sequenceDiagram
    participant Client as React Client
    participant API as FastAPI Server
    participant WE as Workflow Engine
    participant CFE as ChatFlow Executor
    participant NP as Nodes Pool
    participant ChatGPT as ChatOpenAI Node
    participant Chain as LLM Chain Node
    participant Prompt as Prompt Template
    participant OpenAI as OpenAI API
    
    Client->>+API: POST /api/v1/prediction/{chatflowId}
    Note over Client,API: { "question": "Merhaba, nasılsın?" }
    
    API->>+WE: executeFlow(chatflowId, input)
    WE->>WE: loadChatflow(chatflowId)
    WE->>WE: parseFlowData(flowData)
    
    WE->>+CFE: executeFlow(flowData, input)
    CFE->>CFE: topologicalSort(nodes, edges)
    Note over CFE: Execution order: [prompt, chatgpt, chain]
    
    loop For each node in execution order
        CFE->>+NP: getNodeInstance(nodeType)
        NP-->>-CFE: nodeInstance
        
        alt Node: Prompt Template
            CFE->>+Prompt: init(nodeData, input)
            Prompt->>Prompt: formatPrompt(template, variables)
            Prompt-->>-CFE: formattedPrompt
        
        else Node: ChatOpenAI
            CFE->>+ChatGPT: init(nodeData)
            ChatGPT->>ChatGPT: createChatOpenAI(config)
            ChatGPT-->>-CFE: chatOpenAIInstance
        
        else Node: LLM Chain
            CFE->>+Chain: init(nodeData, input)
            Note over Chain: Inputs: {llm: chatOpenAI, prompt: template}
            Chain->>Chain: createLLMChain(llm, prompt)
            Chain->>+OpenAI: invoke(formattedPrompt)
            OpenAI-->>-Chain: response
            Chain-->>-CFE: chainResponse
        end
        
        CFE->>CFE: storeNodeResult(nodeId, result)
    end
    
    CFE-->>-WE: finalResult
    WE->>WE: saveToMemory(sessionId, input, result)
    WE-->>-API: executionResult
    
    API-->>-Client: HTTP 200 OK
    Note over API,Client: { "text": "Merhaba! Ben iyiyim, teşekkürler..." }

